<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="http://aim.mastercard.com/messages/phase1/" version="1.0"
           xmlns:domain="http://aim.mastercard.com/domain/phase1/"
           xmlns:phase1="http://aim.mastercard.com/messages/phase1/"
           xmlns:tns="http://aim.mastercard.com/messages/phase1/"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xs:import namespace="http://aim.mastercard.com/domain/phase1/"
               schemaLocation="Phase_1_AccessIdentityManagement_domain.xsd"/>

    <xs:complexType name="addUserToRoleRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
            <xs:element name="userRole" nillable="false" minOccurs="1" maxOccurs="unbounded" type="domain:userRole"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="addUserToRoleSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="addUserToRoleRequest" type="phase1:addUserToRoleRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="addUserToRoleResponse">
        <xs:sequence>
            <xs:element name="addSuccessful" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="createUserRequest">
        <xs:sequence>
            <xs:element name="userId" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        The unique identifier for the user. Only select client applications
                        may specify user IDs. Other clients will receive a fault. This
                        element exists to allow clients to specify user IDs for users
                        whose ID has significance in downstream applications. For example,
                        employee IDs of internal users.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="userAlias" nillable="false" type="xs:string"/>
            <xs:element name="password" nillable="false" type="xs:string"/>
            <xs:element name="email" nillable="false" type="xs:string"/>
            <xs:element name="firstName" nillable="false" type="xs:string"/>
            <xs:element name="lastName" nillable="false" type="xs:string"/>
            <xs:element name="issuerId" nillable="false" type="xs:string"/>
            <xs:element name="corpId" nillable="false" type="xs:string"/>
            <xs:element name="issuerGroupId" nillable="false" type="xs:string"/>
            <xs:element name="companyGroupId" nillable="false" type="xs:string"/>
            <xs:element name="userRoles" nillable="false" minOccurs="1" maxOccurs="unbounded" type="domain:userRole"/>
            <xs:element name="passwordPolicy" nillable="true" type="domain:passwordPolicy" minOccurs="0"/>
            <xs:element name="suspended" type="xs:boolean" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        An optional element. The user will be created in a suspended state
                        when this element is present and set to true. Otherwise, the user
                        will be in an active (not suspended) state after creation.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="createUserSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="createUserRequest" type="phase1:createUserRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="getUserInfoRequest">
        <xs:annotation>
            <xs:documentation>
                Retrieves the information for the user identified by the given
                user ID.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="userId" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="userInfo">
        <xs:sequence>
            <xs:element name="userId" type="xs:string"/>
            <xs:element name="userAlias" type="xs:string"/>
            <xs:element name="email" type="xs:string"/>
            <xs:element name="firstName" type="xs:string"/>
            <xs:element name="lastName" type="xs:string"/>
            <xs:element name="issuerId" type="xs:string"/>
            <xs:element name="corpId" type="xs:string"/>
            <xs:element name="issuerGroupId" type="xs:string"/>
            <xs:element name="companyGroupId" type="xs:string"/>
            <xs:element name="gsoEnabled" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="userInfoExt">
        <xs:complexContent>
            <xs:extension base="tns:userInfo">
                <xs:sequence>
                    <xs:element name="roles" type="domain:userRole" minOccurs="0" maxOccurs="unbounded" nillable="false"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="adminUserInfo">
        <xs:sequence>
            <xs:element name="adminUserId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="createUserResponse">
        <xs:sequence>
            <xs:element name="userId" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="deleteUserRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="deleteUserSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="deleteUserRequest" type="phase1:deleteUserRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="deleteUserResponse">
        <xs:sequence>
            <xs:element name="deleteSuccessful" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="selfRegisterBackoutRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="selfRegisterBackoutResponse">
        <xs:sequence>
            <xs:element name="deleteSuccessful" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="forgotPasswordRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="forgotPasswordResponse">
        <xs:sequence>
            <xs:element name="temporaryPassword" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="getSoftTokenRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="getSoftTokenResponse">
        <xs:sequence>
            <xs:element name="softTokenDetails" type="domain:softTokenDetails"/>

        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="forgotSeedRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="forgotSeedResponse">
        <xs:sequence>
            <xs:element name="softTokenDetails" type="domain:softTokenDetails"/>

        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="getUserRolesRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="getUserRolesResponse">
        <xs:sequence>
            <xs:element name="userRoles" type="domain:userRole" maxOccurs="unbounded" nillable="true" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="getUserRolesSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="getUserRolesRequest" type="phase1:getUserRolesRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="getSecurityQuestionsRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="getSecurityQuestionsResponse">
        <xs:sequence>
            <xs:element name="securityQuestion" type="domain:securityQuestion" maxOccurs="unbounded" nillable="true"
                        minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="modifyUserRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
            <xs:element name="email" nillable="false" type="xs:string"/>
            <xs:element name="userAlias" nillable="true" type="xs:string" minOccurs="0"/>
            <xs:element name="firstName" nillable="false" type="xs:string"/>
            <xs:element name="lastName" nillable="false" type="xs:string"/>
            <xs:element name="authLevel" nillable="false" type="xs:string"/>
            <xs:element name="issuerId" nillable="false" type="xs:string"/>
            <xs:element name="corpId" nillable="false" type="xs:string"/>
            <xs:element name="issuerGroupId" nillable="false" type="xs:string"/>
            <xs:element name="companyGroupId" nillable="false" type="xs:string"/>
            <xs:element name="securityQuestion" type="domain:securityQuestion" maxOccurs="unbounded" nillable="true"
                        minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="modifyUserResponse">
        <xs:sequence>
            <xs:element name="modifySuccess" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="modifyUserSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="modifyUserRequest" type="phase1:modifyUserRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="removeUserFromRoleRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
            <xs:element name="userRoles" minOccurs="1" maxOccurs="unbounded" nillable="false" type="domain:userRole"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="removeUserFromRoleResponse">
        <xs:sequence>
            <xs:element name="removeSuccessful" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="removeUserFromRoleSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="removeUserFromRoleRequest" type="phase1:removeUserFromRoleRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="restoreUserResponse">
        <xs:sequence>
            <xs:element name="userRestored" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="restoreUserRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="restoreUserSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="restoreUserRequest" type="phase1:restoreUserRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="removeSoftTokenRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="removeSoftTokenResponse">
        <xs:sequence>
            <xs:element name="tokenRemoved" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="searchUserRequest">
        <xs:sequence>
            <xs:element name="userAlias" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="email" type="xs:string" nillable="true" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="searchUserResponse">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
            <xs:element name="userAlias" nillable="false" type="xs:string"/>
            <xs:element name="email" nillable="false" type="xs:string"/>
            <xs:element name="authLevel" nillable="false" type="xs:string"/>
            <xs:element name="tokenReady" nillable="false" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="selfRegisterRequest">
        <xs:sequence>
            <xs:element name="userAlias" nillable="false" type="xs:string"/>
            <xs:element name="password" nillable="false" type="xs:string"/>
            <xs:element name="email" nillable="false" type="xs:string"/>
            <xs:element name="firstName" nillable="false" type="xs:string"/>
            <xs:element name="lastName" nillable="false" type="xs:string"/>
            <xs:element name="issuerId" nillable="false" type="xs:string"/>
            <xs:element name="corpId" nillable="false" type="xs:string"/>
            <xs:element name="issuerGroupId" nillable="false" type="xs:string"/>
            <xs:element name="companyGroupId" nillable="false" type="xs:string"/>
            <xs:element name="userRoles" nillable="false" minOccurs="1" maxOccurs="unbounded" type="domain:userRole"/>
            <xs:element name="securityQuestion" type="domain:securityQuestion" maxOccurs="unbounded" nillable="true"
                        minOccurs="0"/>
            <xs:element name="passwordPolicy" nillable="true" type="domain:passwordPolicy" minOccurs="0"/>
            <xs:element name="suspended" type="xs:boolean" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        An optional element. The user will be created in a suspended state
                        when this element is present and set to true. Otherwise, the user
                        will be in an active (not suspended) state after creation.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="selfRegisterResponse">
        <xs:sequence>
            <xs:element name="userId" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="setSoftTokenRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
            <xs:element name="seedXml" nillable="false" type="xs:string"/>
            <xs:element name="issueDate" nillable="false" type="xs:string"/>
            <xs:element name="expiryDate" nillable="false" type="xs:string"/>
            <xs:element name="seqNum" nillable="false" type="xs:string"/>
            <xs:element name="deviceId" nillable="true" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="setSoftTokenResponse">
        <xs:sequence>
            <xs:element name="softTokenSet" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="suspendUserResponse">
        <xs:sequence>
            <xs:element name="userSuspended" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="suspendUserRequest">
        <xs:sequence>
            <xs:element name="userId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="suspendUserSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="suspendUserRequest" type="phase1:suspendUserRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="createRoleRequest">
        <xs:sequence>
            <xs:element name="applicationId" nillable="false" type="xs:string"/>
            <xs:element name="roleId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="createRoleResponse">
        <xs:sequence>
            <xs:element name="roleId" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="createRoleSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="createRoleRequest" type="phase1:createRoleRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="deleteRoleRequest">
        <xs:sequence>
            <xs:element name="applicationId" nillable="false" type="xs:string" minOccurs="0"/>
            <xs:element name="roleId" nillable="false" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="deleteRoleResponse">
        <xs:sequence>
            <xs:element name="deleteSuccessful" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="deleteRoleSystemRequest">
        <xs:sequence>
            <xs:element name="adminUserInfo" type="phase1:adminUserInfo"/>
            <xs:element name="deleteRoleRequest" type="phase1:deleteRoleRequest"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="registerESBClientUserRequest">
        <xs:complexContent>
            <xs:extension base="domain:esbClientUser"/>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="registerESBClientUserResponse">
        <xs:complexContent>
            <xs:extension base="domain:esbClientUser"/>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="modifyESBClientUserRequest">
    	<xs:sequence>
    		<xs:group ref="domain:esbClientNameGroup" />
    		<xs:element name="attributesToAdd" type="domain:esbClientAttribs" minOccurs="0" />
    		<xs:element name="attributesToRemove" type="domain:esbClientAttribs" minOccurs="0" />
    	</xs:sequence>
    </xs:complexType>

    <xs:complexType name="modifyESBClientUserResponse">
        <xs:complexContent>
            <xs:extension base="domain:esbClientUser"/>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="deleteESBClientUserRequest">
        <xs:sequence>
            <xs:element name="name" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        The name of the ESB client to delete.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="deleteESBClientUserResponse">
    	<xs:sequence>
    		<xs:element name="deleted" type="xs:boolean">
    			<xs:annotation>
    				<xs:documentation>
    					True indicates that the named ESB user was found and deleted.
    					False indicates that the named ESB user was not found and no action was taken.
    				</xs:documentation>
    			</xs:annotation>
    		</xs:element>
    	</xs:sequence>
    </xs:complexType>

    <xs:complexType name="testServiceRequest">
        <xs:sequence>
            <xs:element name="testString" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="testServiceResponse">
        <xs:sequence>
            <xs:element name="return" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="authenticatePasswordRequest">
        <xs:sequence>
            <xs:element name="userCredentials" type="domain:userCredentials" maxOccurs="1" nillable="false"
                        minOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="authenticatePasswordResponse">
        <xs:sequence>
            <xs:element name="authenticationSuccessful" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="getRolesRequest">
        <xs:sequence/>
    </xs:complexType>

    <xs:complexType name="getRolesResponse">
        <xs:sequence>
            <xs:element name="roles">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="role" minOccurs="0" maxOccurs="unbounded" type="domain:userRole"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:simpleType name="userId">
        <xs:annotation>
            <xs:documentation>
                The ID of the User in the data store
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
</xs:schema>